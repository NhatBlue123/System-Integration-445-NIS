M·ª§C TI√äU:
D√πng Apache Kafka trong project  x√¢y d·ª±ng ki·∫øn tr√∫c event-driven (ki·∫øn tr√∫c d·ª±a tr√™n s·ª± ki·ªán), thay cho vi·ªác g·ªçi tr·ª±c ti·∫øp HTTP (RestTemplate). N√≥ s·∫Ω gi√∫p:

Kh√¥ng c·∫ßn g·ªçi HTTP t·ª´ SpringApp ‚Üí SpringShow khi th√™m/xo√°.

SpringShow ch·ªâ c·∫ßn l·∫Øng nghe (consume) message t·ª´ Kafka l√† t·ª± c·∫≠p nh·∫≠t d·ªØ li·ªáu.

H·∫°n ch·∫ø ph·ª• thu·ªôc tr·ª±c ti·∫øp gi·ªØa c√°c h·ªá th·ªëng.

Linh ho·∫°t m·ªü r·ªông v·ªÅ sau (g·ª≠i event cho nhi·ªÅu service).

‚úÖ T·ªïng quan ki·∫øn tr√∫c khi d√πng Kafka:

üì¶ springapp (8080)
    ‚îî‚îÄ‚îÄ> Khi th√™m/xo√° employee
          ‚îî‚îÄ‚îÄ> G·ª≠i Kafka message: "employee_updated"

üì¶ hrapp (19355)
    ‚îî‚îÄ‚îÄ> Khi th√™m/xo√° personal
          ‚îî‚îÄ‚îÄ> G·ª≠i Kafka message: "personal_updated"

üì¶ springapp_show (8888)
    ‚îî‚îÄ‚îÄ> Subcribe Kafka topic
          ‚îî‚îÄ‚îÄ> Khi nh·∫≠n message:
              ‚îú‚îÄ‚îÄ Xo√° cache Redis
              ‚îú‚îÄ‚îÄ Merge l·∫°i d·ªØ li·ªáu
              ‚îî‚îÄ‚îÄ G·ª≠i WebSocket c·∫≠p nh·∫≠t realtime UI


‚ú® C√°c b∆∞·ªõc tri·ªÉn khai Kafka
1. C√†i ƒë·∫∑t Kafka (local ho·∫∑c docker)
docker network create kafka-net

# Zookeeper
docker run -d --name zookeeper --network kafka-net -p 2181:2181 zookeeper

# Kafka
docker run -d --name kafka --network kafka-net -p 9092:9092 -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 \
  -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 \
  -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \
  confluentinc/cp-kafka
2. Th√™m Kafka dependency
<dependency>
  <groupId>org.springframework.kafka</groupId>
  <artifactId>spring-kafka</artifactId>
</dependency>
N·∫øu d√πng ant th√¨ l√™n gg t·∫£i jar hay chi v·ªÅ
3. C·∫•u h√¨nh Kafka (·ªü c·∫£ 3 app)
- config file application.properties:
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=merge-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
4. G·ª≠i s·ª± ki·ªán t·ª´ springapp
file üìÑ KafkaProducerService.java:
@Service
public class KafkaProducerService {
    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    public void sendEmployeeUpdatedEvent() {
        kafkaTemplate.send("employee_updated", "Update employee");
    }
}

Trong controller th√™m employee:
@Autowired
private KafkaProducerService kafkaProducer;

...

kafkaProducer.sendEmployeeUpdatedEvent();

5. L·∫Øng nghe s·ª± ki·ªán t·ª´ springapp_show
-üìÑ KafkaConsumerService.java
@Service
public class KafkaConsumerService {

    @Autowired
    private EPersonController epersonController;

    @KafkaListener(topics = {"employee_updated", "personal_updated"}, groupId = "merge-group")
    public void handleUpdateEvent(String message) {
        System.out.println("üì• Kafka received: " + message);

        // Clear Redis cache
        try (Jedis jedis = RedisConfig.getJedis()) {
            jedis.del("mergedEPerson");
        } catch (Exception e) {
            e.printStackTrace();
        }

        // G·ªçi l·∫°i merge + g·ª≠i WebSocket
        epersonController.updateRealtimeMergeData();
    }
}

6. T·∫°o topic (tu·ª≥ Kafka version)
docker exec kafka kafka-topics.sh --create --topic employee_updated --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
docker exec kafka kafka-topics.sh --create --topic personal_updated --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
‚úÖ L·ª£i √≠ch
Kh√¥ng c·∫ßn g·ªçi HTTP gi·ªØa c√°c app.

M·ªü r·ªông d·ªÖ d√†ng th√™m nhi·ªÅu consumer (logging, analytics...).

M·∫°nh h∆°n khi scale h·ªá th·ªëng microservices.

WebSocket realtime v·∫´n gi·ªØ nguy√™n ‚Üí ch·ªâ thay c√°ch k√≠ch ho·∫°t.




